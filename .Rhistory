plot(y,x1)
plot(y,x2)
plot(y,x3)
coef(lm(y~x1+x2+x3-1))
e<-function(a,b) a-sum(a*b)/sum(b^2)*b
ey<-e(e(y,x2),e(x3,x2))
ex<-e(e(x,x2),e(x3,x2))
ex<-e(e(x1,x2),e(x3,x2))
sum(ey*ex)/sum(ex^2)
y=x+sin(x)
x
x
x=1
y=x+sin(x)
x=c(1,2,3,4,1,2,3,8,5,2,2,3)
y=x+sin(x)
plot(y,x)
y1<-resid(lm(y~x))
plot(y1,x)
plot(x,y1)
plot(y1,x)
plot(x,y1)
plot(y,x)
plot(x,y)
n<-100
x<-rnorm(n)
x2<-rnorm(n)
x3<-rnorm(n)
e<-function(a,b) a-sum(a*b)/sum(b^2)*b
ey<-e(e(y,x3),e(x2,x3))
ex<-e(e(x,x3),e(x2,x3))
sum(ey*ex)/sum(ex^2)
coef(lm(y~x+x2+x3-1))
n
ey<-e(e(y,x3),e(x2,x3))
ey<-e(e(y,x2),e(x3,x2))
e<-function(a,b) {a-(sum(a*b)/sum(b^2))*b}
ey<-e(e(y,x2),e(x3,x2))
n<-100
x<-rnorm(n)
y<-x+x2+x3+rnorm(n,sd=.1)
ey<-e(e(y,x3),e(x2,x3))
ex<-e(e(x,x3),e(x2,x3))
sum(ey*ex)/sum(ex^2)
coef(lm(y~x+x2+x3-1))
ey<-e(e(x3,y),e(x2,x3))
ex<-e(e(x,x3),e(x2,x3))
sum(ey*ex)/sum(ex^2)
e(x3,y)
x4<-rnorm(n)
y<-x+x2+x3+x4+rnorm(n,sd=.1)
coef(lm(y~x+x2+x3+x4-1))
ey<-e(e(y,x3),e(x3,x2)),e((y,x4),e(x4,x2)))
ey<-e(e(y,x3),e(x3,x2)),e(e(y,x4),e(x4,x2)))
ey<-e(e(e(y,x3),e(x3,x2)),e(e(y,x4),e(x4,x2))))
ey<-e(e(e(y,x3),e(x3,x2)),e(e(y,x4),e(x4,x2)))
ex<-e(e(e(x,x3),e(x3,x2)),e(e(x,x4),e(x4,x2)))
sum(ey*ex)/sum(ex^2)
resid
?resid
library(rgl)
data(Fertility)
x<-seq(10,10,length=1000)
p<-exp(b0+b1*x)/(1+exp(b0+b1*x))
manipulate(fun<-exp(b0+b1*x)/(1+exp(b0+b1*x))
)
amnipulate(
)
manipulate(
plot(x,exp(b0 + b1 * x)/(1 + exp(b0 + b1 * x))),type="l",lwd=3,frame=FALSE),b0=slider(-2,2,step=.1),b0=slider(-2,2,step=.1))
x
manipulate(plot(x,exp(b0 + b1 * x)/(1 + exp(b0 + b1 * x))),type="l",lwd=3,frame=FALSE),b0=slider(-2,2,step=.1),b0=slider(-2,2,step=.1))
myplot<-function(b0,b1){
plot(x,exp(b0 + b1 * x)/(1 + exp(b0 + b1 * x))),type="l",lwd=3,frame=FALSE),
}
myplot<-function(b0,b1){
plot(x,exp(b0 + b1 * x)/(1 + exp(b0 + b1 * x)),type="l",lwd=3,frame=FALSE),
}
myplot<-function(b0,b1){
plot(x,exp(b0 + b1 * x)/(1 + exp(b0 + b1 * x)),type="l",lwd=3,frame=FALSE)
}
manipulate(myplot(b0,b1),b0=slider(-2,2,step=.1),b0=slider(-2,2,step=.1))
library(manipulate)
manipulate(myplot(b0,b1),b0=slider(-2,2,step=.1),b0=slider(-2,2,step=.1))
manipulate(myplot(b0,b1),b0=slider(-2,2,step=.1),b1=slider(-2,2,step=.1))
myplot<-function(b0,b1){
plot(x,exp(b0 + b1 * x)/(1 + exp(b0 + b1 * x)),type="l",lwd=3)
}
manipulate(myplot(b0,b1),b0=slider(-2,2,step=.1),b1=slider(-2,2,step=.1))
x
manipulate(myplot(b0,b1),b0=slider(-2,2,step=.1),b1=slider(-2,2,step=.1))
plot(0:10,dpois(0:10,lambda=2),type="h",frame=FALSE)
plot(0:10,dpois(0:10,lambda=2),type="h",frame=FALSE)
plot(0:20,dpois(0:20,lambda=10),type="h",frame=FALSE)
plot(0:100,dpois(0:100,lambda=50
)
)
library(shiny)
set.seed(31)
lambda<-.2
n<-40
simulation<-1000
simulated<-replicate(simulation,rexp(n,lambda))
means<-apply(simulated,2,mean)
means
simulated
means<-apply(simulated,2,mean)
#dist mean
dist_mean<-mean(means)
means
dist_mean
theorymean<-1/lambda
theorymean
hist(means,xlab="mean",main="exp function simulation")
abline(v=theorymean,col="black")
abline(v=dist_mean,col="red")
std_dev<-sd(means)
std_dev
#sd of analytical
std_theory<-(1/lambda)/sqrt(n)
std_theory
#variance of dist
var_dist<-std_dev^2
var_dist
#var of analytical
var_theory<-((1/lambda)*(1/sqrt(n)))^2
var_theory
xfit <- seq(min(means), max(means), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means,breaks=n,prob=T,col="red",xlab = "means",main="Density of means",ylab="density")
lines(xfit, yfit, pch=22, col="black", lty=5)
hist(means,breaks=n,prob=T,col="red",xlab = "means",main="Density of means",ylab="density")
hist(means,breaks=n,col="red",xlab = "means",main="Density of means",ylab="density")
hist(means,breaks=n/2,prob=T,col="red",xlab = "means",main="Density of means",ylab="density")
hist(means,breaks=n,prob=T,col="red",xlab = "means",main="Density of means",ylab="density")
lines(xfit, yfit, pch=22, col="black", lty=5)
qqnorm(means)
qqline(means, col = 2)
library(ggplot2)
data("ToothGrowth")
summary(ToothGrowth)
unique(ToothGrowth$len)
unique(ToothGrowth$supp)
unique(ToothGrowth$dose)
ToothGrowth$dose<-as.factor(ToothGrowth$dose)
head(ToothGrowth)
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) + xlab("Dose Amount") + ylab("Tooth Length") + facet_grid(~ supp) + ggtitle("Tooth Length vs. Dose Amount \nby Delivery Method") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp)) + xlab("Supplement Delivery") + ylab("Tooth Length") + facet_grid(~ dose) + ggtitle("Tooth Length vs. Delivery Method \nby Dose Amount") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
t.test(len~supp,data=ToothGrowth)
ToothGrowth_sub <- subset(ToothGrowth, ToothGrowth$dose %in% c(1.0,0.5))
t.test(len~dose,data=ToothGrowth_sub)
ToothGrowth_sub <- subset(ToothGrowth, ToothGrowth$dose %in% c(0.5,2.0))
t.test(len~dose,data=ToothGrowth_sub)
ToothGrowth_sub <- subset(ToothGrowth, ToothGrowth$dose %in% c(1.0,2.0))
t.test(len~dose,data=ToothGrowth_sub)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
mtcars
z.cols<-cut(mtcars$am,2,c("red","blue"))
z.cols
plot(mtcars$wt, mtcars$mpg, col=as.character(z.cols))
plot(mtcars$wt, mtcars$mpg, col=as.character(z.cols))
a<-rnorm(50)
b<-rnorm(50)
x<-as.matrix(a,b)
plot(x)
kmeans(x,3)
model<-kmeans(x,3)
model.weights()
model.weights
model.weights
model<-kmeans(x,3)
summary(model)
model$centers
model$withinss
model<-kmeans(x,3,ittr.max=3)
?kmeans
model<-kmeans(x,3,iter.max=3)
model$withinss
model<-kmeans(x,3,iter.max=6)
model$withinss
model<-kmeans(x,3,iter.max=60)
model$withinss
kmeans.wss.s<-function(d,k){
km<-kmenas(d,k)
return(sum(kmeans$withiness))
}
kmeans.wss.s(x,3)
kmeans.wss.s<-function(d,k){
+ km<-kmeans(d,k)
+ return(sum(kmeans$withiness))
}
kmeans.wss.s(x,3)
kmeans.wss.s<-function(d,k){
+ km<-kmeans(d,k)
+ return(sum(km$withiness))
}
kmeans.wss.s(x,3)
kmeans.wss.s<-function(d,k){
km<-kmeans(d,k)
return(sum(km$withiness))}
kmeans.wss.s(x,3)
x
dim(x)
x<-as.matrix(a,b)
dim(x)
plot(x)
class(x)
m
model$cluster
model$withinss
kmeans.wss.s<-function(d,k){
km<-kmeans(d,k)
return(sum(km$withinss))}
kmeans.wss.s(x,3)
model$withinss
sapply(1:10,kmeans.wss.s)
fun<-function(k){
}
fun<-function(){
for k %in% 1:10{}
fun<-function(){
for k %in% 1:10{
kmeans.wss.s<-function(d,k){
for (i in 1:k){
km<-kmeans(d,i)
return(sum(km$withinss))
}
}
kmeans.wss.s
kmeans.wss.s(x,10)
vec<-c('a')
vec=c(vec,'b')
vec
kmeans.wss.s<-function(d,k){
vec=vector("numeric",length=k)
for (i in 1:k){
km<-kmeans(d,i)
vec=c(vec,km$withinss)
}
return vec
}
kmeans.wss.s<-function(d,k){
vec=vector("numeric",length=k)
for (i in 1:k){
km<-kmeans(d,i)
vec=c(vec,km$withinss)
}
vec
}
kmeans.wss.s(x,5)
kmeans.wss.s<-function(d,k){
vec=vector("numeric",length=k)
for (i in 1:k){
km<-sum(kmeans(d,i))
vec=c(vec,km$withinss)
}
vec
}
kmeans.wss.s(x,5)
kmeans.wss.s<-function(d,k){
vec=vector("numeric",length=k)
for (i in 1:k){
km<-kmeans(d,i)
vec=c(vec,sum(km$withinss))
}
vec
}
kmeans.wss.s(x,5)
kmeans.wss.s<-function(d,k){
vec=vector("numeric",length=k)
for (i in 1:k){
km<-kmeans(d,i)
vec=c(vec,sum(km$withinss))
}
}
kmeans.wss.s(x,5)
kmeans.wss.s<-function(d,k){
vec=vector("numeric",length=k)
for (i in 1:k){
km<-kmeans(d,i)
vec=c(vec,sum(km$withinss))
}
return (vec)
}
kmeans.wss.s(x,5)
kmeans.wss.s<-function(d,k){
vec=vector("numeric",length=k)
for (i in 1:k){
km<-kmeans(d,i)
vec=c(vec,sum(km$withinss))
}
print("hello"+vec)
return (vec)
}
kmeans.wss.s(x,5)
kmeans.wss.s<-function(d,k){
vec=vector("numeric",length=k)
for (i in 1:k){
km<-kmeans(d,i)
vec=c(vec,sum(km$withinss))
}
print("hello"+str(vec)
return (vec)
}
kmeans.wss.s<-function(d,k){
vec=vector("numeric",length=k)
for (i in 1:k){
km<-kmeans(d,i)
vec=c(vec,sum(km$withinss))
}
print("hello"+str(vec))
return (vec)
}
kmeans.wss.s(x,5)
kmeans.wss.s<-function(d,k){
vec=vector("numeric",length=k)
for (i in 1:k){
km<-kmeans(d,i)
vec=c(vec,sum(km$withinss))
}
vec
}
kmeans.wss.s(x,5)
sum(kmeans(x,1)$withinss)
sum(kmeans(x,2)$withinss)
sum(kmeans(x,3)$withinss)
sum(kmeans(x,4)$withinss)
vec
vec
xx<-kmeans.wss.s(x,5)
xx
class(xx)
kmeans.wss.s<-function(d,k){
vec=vector("numeric")
for (i in 1:k){
km<-kmeans(d,i)
vec=c(vec,sum(km$withinss))
}
vec
}
xx<-kmeans.wss.s(x,5)
xx
plot(xx)
plot(xx,type="b")
setwd("C:\\Users\\suman\\Desktop\\datasciencecoursera\\mclearning")
training<-read.table("pml-training.csv",sep=',',header=TRUE)
testing<-read.table("pml-testing.csv",sep=',',header=TRUE)
ncol((training))
ncol((test))
ncol((testing)
)
is_data<-apply(!is.na(training),2,sum)
is.data
is_data
is_data<-apply(!is.na(training),2,sum)>19621
is_data
length(is_data)
training_clean<-training[,is_data]
ncol(training)
is_data<-apply(!is.na(training),2,sum)>19621
ncol(training_clean)
is_data<-apply(!is.na(training),2,sum)>19000
training_clean<-training[,is_data]
ncol(training_clean)
is_data<-apply(!is.na(training),2,sum)>14000
training_clean<-training[,is_data]
ncol(training_clean)
is_data<-apply(!is.na(training),2,sum)>10000
training_clean<-training[,is_data]
ncol(training_clean)
is_data<-apply(!is.na(training),2,sum)>1000
training_clean<-training[,is_data]
ncol(training_clean)
is_data<-apply(!is.na(training),2,sum)>100
training_clean<-training[,is_data]
ncol(training_clean)
is_data<-apply(!is.na(training),2,sum)>14000
training_clean<-training[,is_data]
ncol(training_clean)
training_clean<-training[,7:160]
is_data<-apply(!is.na(training_clean),2,sum)>14000
training_clean<-training[,is_data]
ncol(training_clean)
library(caret)
set.seed(12345)
intrain<-createDataPartition(y=training_clean$classe,p=.6,list=FALSE)
intrain
train1<-training_clean[intrain,]
train2<-training_clean[-intrain,]
dim(train1)
dim(train2)
nzv_cols <- nearZeroVar(train1)
nzv_cols
if(length(nzv_cols)>0){
train1<-train1[,-nzv_cols]
train2<-train2[,-nzv_cols]
}
dim(train1)
dim(train2)
library(randomForest)
fitModel <- randomForest(classe~., data=train1, importance=TRUE, ntree=100)
varImpPlot(fitModel)
fitModel <- randomForest(classe~., data=train1, importance=TRUE, ntree=100)
head(train1)
fitModel <- randomForest(classe~., data=train1, importance=TRUE, ntree=100)
library(randomForest)
fitModel <- randomForest(classe~., data=train1, importance=TRUE, ntree=100)
ncol(train1)
ncol(training)
ncol(training_clean)
nrow(training)
training_clean<-training[,7:160]
is_data<-apply(!is.na(training_clean),2,sum)>19621
training_clean<-training[,is_data]
ncol(training_clean)
library(caret)
set.seed(12345)
intrain<-createDataPartition(y=training_clean$classe,p=.6,list=FALSE)
train1<-training_clean[intrain,]
train2<-training_clean[-intrain,]
dim(train1)
dim(train2)
head(train1)
nzv_cols <- nearZeroVar(train1)
if(length(nzv_cols)>0){
train1<-train1[,-nzv_cols]
train2<-train2[,-nzv_cols]
}
dim(train1)
dim(train2)
set.seed(3141592)
intrain<-createDataPartition(y=training_clean$classe,p=.6,list=FALSE)
train1<-training_clean[intrain,]
train2<-training_clean[-intrain,]
dim(train1)
dim(train2)
nzv_cols <- nearZeroVar(train1)
if(length(nzv_cols)>0){
train1<-train1[,-nzv_cols]
train2<-train2[,-nzv_cols]
}
dim(train1)
dim(train2)
fitModel <- randomForest(classe~., data=train1, importance=TRUE, ntree=100)
head(training_clean)
dim(training)
training_clean<-training[,7:160]
is.na(training_clean)
sum(is.na(training_clean))
is_data
length(is_data)
training_clean<-training_clean[lapply(training_clean,function(x)
sum(is.na(x))/length(x))<.1]
training_clean
ncol(training_clean)
intrain<-createDataPartition(y=training_clean$classe,p=.6,list=FALSE)
train1<-training_clean[intrain,]
train2<-training_clean[-intrain,]
dim(train1)
dim(train2)
nzv_cols <- nearZeroVar(train1)
if(length(nzv_cols)>0){
train1<-train1[,-nzv_cols]
train2<-train2[,-nzv_cols]
}
dim(train1)
dim(train2)
fitModel <- randomForest(classe~., data=train1, importance=TRUE, ntree=100)
varImpPlot(fitModel)
correl = cor(train1[,c("yaw_belt","roll_belt","num_window","pitch_belt","magnet_dumbbell_z","magnet_dumbbell_y","pitch_forearm","accel_dumbbell_y","roll_arm","roll_forearm")])
diag(correl) <- 0
which(abs(correl)>0.75, arr.ind=TRUE)
or(train1$roll_belt, train1$yaw_belt)
cor(train1$roll_belt, train1$yaw_belt)
correl = cor(train1[,c("roll_belt","num_window","pitch_belt","magnet_dumbbell_z","magnet_dumbbell_y","pitch_forearm","accel_dumbbell_y","roll_arm","roll_forearm")])
diag(correl) <- 0
which(abs(correl)>0.5, arr.ind=TRUE)
correl = cor(train1[,c("roll_belt","num_window","pitch_belt","magnet_dumbbell_z","magnet_dumbbell_y","pitch_forearm","accel_dumbbell_y","roll_arm","roll_forearm")])
diag(correl) <- 0
which(abs(correl)>0.4, arr.ind=TRUE)
qplot(roll_belt, magnet_dumbbell_y, colour=classe, data=train1)
qplot(roll_belt, magnet_dumbbell_y, colour=classe, data=train1)
library(qplot)
plot(roll_belt, magnet_dumbbell_y, colour=classe, data=train1)
plot(roll_belt, magnet_dumbbell_y)
plot(roll_belt, magnet_dumbbell_y, data=train1)
plot(train1$roll_belt, train1$magnet_dumbbell_y)
plot(train1$roll_belt, train1$magnet_dumbbell_y,colour=train1$classe)
?plot
library(rpart.plot)
fitModel <- rpart(classe~., data=train1, method="class")
prp(fitModel)
fitModel <- train(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,
data=train1,
method="rf",
trControl=trainControl(method="cv",number=2),
prox=TRUE,
verbose=TRUE,
allowParallel=TRUE)
fitModel <- randomForest(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,
data=train1,
method="rf",
trControl=trainControl(method="cv",number=2),
prox=TRUE,
verbose=TRUE,
allowParallel=TRUE)
saveRDS(fitModel, "modelRF.Rds")
fitModel <- readRDS("modelRF.Rds")
fitModel
